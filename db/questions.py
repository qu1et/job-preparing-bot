QUESTION = {
    "q1": {
        "question_title": "Как часто следует проводить регрессионное тестирование продукта?",
        "question_body": "Вопрос проверяет понимание важности регулярного регрессионного тестирования и факторов, влияющих на его частоту.",
        "answer": "Регрессионное тестирование следует проводить после каждого изменения кода, такого как исправление багов, добавление новых функций или рефакторинг. Частота зависит от объема изменений и стадии разработки продукта: на этапах активной разработки оно проводится чаще, а на стадии поддержки — реже, при необходимости.",
        "category": "QA",
        "image_name": "",
    },
    "q2": {
        "question_title": "Что такое техника анализа предельных значений? В чем ценность этой техники?",
        "question_body": "Вопрос проверяет знание метода тестирования значений на границах диапазонов, где чаще всего возникают ошибки.",
        "answer": "Анализ предельных значений — это техника тестирования, которая фокусируется на проверке данных, находящихся на границах допустимого диапазона. Ценность этой техники в том, что ошибки чаще возникают именно на границах, поэтому тестирование таких значений помогает выявить дефекты.",
        "category": "QA",
        "image_name": "",
    },
    "q3": {
        "question_title": "Что такое техника анализа классов эквивалентности?",
        "question_body": "Вопрос проверяет знание метода оптимизации тестов путем разделения данных на классы с эквивалентным поведением.",
        "answer": "Анализ классов эквивалентности — это техника тест-дизайна, при которой входные данные делятся на группы, называемые классами эквивалентности. Все значения внутри одного класса считаются обрабатываемыми системой одинаково, поэтому для тестирования достаточно выбрать одно значение из каждого класса.",
        "category": "QA",
        "image_name": "",
    },
    "q4": {
        "question_title": "Какие техники тест-дизайна знаете?",
        "question_body": "Вопрос проверяет знание основных техник тест-дизайна, которые применяются для создания тест-кейсов",
        "answer": "Среди популярных техник тест-дизайна можно выделить эквивалентное разбиение, анализ граничных значений, таблицы решений и тестирование переходов состояний. Эти техники помогают создавать эффективные тесты, минимизируя избыточность и охватывая ключевые сценарии.",
        "category": "QA",
        "image_name": "",
    },
    "q5": {
        "question_title": "Какие уровни тестирования знаете?",
        "question_body": "Вопрос проверяет знание уровней тестирования и их последовательности в процессе разработки.",
        "answer": "Основные уровни тестирования: модульное, интеграционное, системное и приемочное. Они применяются для проверки продукта от самых мелких компонентов до его полной функциональности в реальных условиях.",
        "category": "QA",
        "image_name": "",
    },
    "q6": {
        "question_title": "Как браузер читает JSX?",
        "question_body": "Этот вопрос проверяет, понимает ли разработчик, что браузеры не понимают JSX напрямую и как происходит процесс его преобразования.",
        "answer": "Браузеры не могут напрямую читать JSX, так как это не валидный JavaScript. Для того чтобы браузер мог его исполнить, JSX необходимо транспилировать (преобразовать) в обычный JavaScript. Это обычно делается с помощью инструментов, таких как Babel, которые преобразуют JSX в вызовы функций, понятные браузеру.",
        "category": "Frontend",
        "image_name": "",
    },
    "q7": {
        "question_title": "Как создать компонент в React?",
        "question_body": "Вопрос проверяет, знает ли разработчик базовые принципы создания компонентов в React.",
        "answer": "Чтобы создать компонент в React, достаточно написать функцию или класс, который возвращает JSX. Функциональные компоненты сейчас являются стандартом, и их можно создавать с помощью простой функции, которая принимает props и возвращает разметку.",
        "category": "Frontend",
        "image_name": "",
    },
    "q8": {
        "question_title": "Можете объяснить концепцию Virtual DOM в React?",
        "question_body": "Вопрос проверяет понимание одного из основных механизмов React, который делает его быстрым — виртуального DOM.",
        "answer": "Virtual DOM — это абстракция реального DOM, которая используется React для улучшения производительности. Вместо того чтобы обновлять реальный DOM напрямую при каждом изменении состояния, React сначала обновляет виртуальный DOM, а затем сравнивает его с предыдущей версией, чтобы минимизировать количество операций с реальным DOM. Этот процесс называется дифференциацией (reconciliation)",
        "category": "Frontend",
        "image_name": "",
    },
    "q9": {
        "question_title": "В чем разница между props и state?",
        "question_body": "Этот вопрос направлен на проверку понимания двух ключевых понятий — props и state, и их отличий в React.",
        "answer": "Props — это данные, которые передаются в компонент извне, в то время как state — это внутренние данные компонента, которые могут изменяться. Props передаются родительским компонентом и неизменны, а state управляется внутри самого компонента и может изменяться в течение времени.",
        "category": "Frontend",
        "image_name": "",
    },
    "q10": {
        "question_title": "Можете объяснить концепцию props в React?",
        "question_body": "Этот вопрос проверяет, понимает ли разработчик, как компоненты передают друг другу данные",
        "answer": "Props — это способ передачи данных от одного компонента к другому. Они неизменяемы и позволяют родительским компонентам передавать информацию дочерним компонентам, чтобы настраивать их поведение или внешний вид.",
        "category": "Frontend",
        "image_name": "",
    },
    "q11": {
        "question_title": "Что такое итератор?",
        "question_body": "Этот вопрос проверяет знание механизма итераторов и их роли в работе с последовательностями в Python.",
        "answer": "Итератор — это объект, который поддерживает протокол итерации. Он имеет методы __iter__() и __next__(). Итераторы позволяют последовательно получать элементы коллекции, например, списка или строки, без необходимости загружать их все сразу в память.",
        "category": "Backend",
        "image_name": "",
    },
    "q12": {
        "question_title": "Что такое индексы и как они работают?",
        "question_body": "Этот вопрос проверяет знание индексов и их использования для доступа к элементам последовательностей в Python.",
        "answer": "Индексы — это числа, которые указывают позицию элемента в последовательности, такой как список, кортеж или строка. Они начинаются с нуля, а отрицательные индексы отсчитываются с конца. Индексы позволяют извлекать отдельные элементы или создавать срезы (части последовательности).",
        "category": "Backend",
        "image_name": "",
    },
    "q13": {
        "question_title": "Что такое генератор?",
        "question_body": "Этот вопрос проверяет понимание механизма генераторов в Python, которые используются для ленивого создания последовательностей данных.",
        "answer": "Генератор — это функция, которая возвращает значения по одному с помощью ключевого слова yield. Он позволяет экономить память, так как элементы создаются на лету по запросу. Генераторы можно использовать для работы с большими данными, где нет необходимости сразу загружать всё в память.",
        "category": "Backend",
        "image_name": "",
    },
    "q14": {
        "question_title": "Что такое SOLID?",
        "question_body": "Вопрос проверяет знание принципов объектно-ориентированного программирования, важных для написания поддерживаемого и масштабируемого кода.",
        "answer": "SOLID — это набор из пяти принципов ООП, которые помогают писать устойчивый и легко поддерживаемый код. Принципы включают: единую ответственность, открытость/закрытость, подстановку Лисков, разделение интерфейсов и инверсии зависимостей.",
        "category": "Backend",
        "image_name": "",
    },
    "q15": {
        "question_title": "Что такое декораторы?",
        "question_body": "Этот вопрос проверяет понимание механизма декораторов, который используется для модификации поведения функций или классов.",
        "answer": "Декораторы — это функции, которые принимают другую функцию в качестве аргумента и возвращают новую функцию с изменённым поведением. Они позволяют добавлять функциональность к функциям или методам, не изменяя их код.",
        "category": "Backend",
        "image_name": "",
    },
}
